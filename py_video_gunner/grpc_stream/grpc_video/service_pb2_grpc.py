# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from py_video_gunner.grpc_stream.grpc_video import data_pb2 as py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_data__pb2
from py_video_gunner.grpc_stream.grpc_video import response_pb2 as py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_response__pb2


class VideoUploadStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upload = channel.stream_unary(
                '/py_video_gunner.grpc_stream.grpc_video.service.VideoUpload/Upload',
                request_serializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_data__pb2.Chunk.SerializeToString,
                response_deserializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_response__pb2.UploadStatus.FromString,
                )
        self.UploadBi = channel.stream_stream(
                '/py_video_gunner.grpc_stream.grpc_video.service.VideoUpload/UploadBi',
                request_serializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_data__pb2.Chunk.SerializeToString,
                response_deserializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_response__pb2.UploadStatus.FromString,
                )


class VideoUploadServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Upload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadBi(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoUploadServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Upload': grpc.stream_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_data__pb2.Chunk.FromString,
                    response_serializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_response__pb2.UploadStatus.SerializeToString,
            ),
            'UploadBi': grpc.stream_stream_rpc_method_handler(
                    servicer.UploadBi,
                    request_deserializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_data__pb2.Chunk.FromString,
                    response_serializer=py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_response__pb2.UploadStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'py_video_gunner.grpc_stream.grpc_video.service.VideoUpload', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoUpload(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Upload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/py_video_gunner.grpc_stream.grpc_video.service.VideoUpload/Upload',
            py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_data__pb2.Chunk.SerializeToString,
            py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_response__pb2.UploadStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadBi(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/py_video_gunner.grpc_stream.grpc_video.service.VideoUpload/UploadBi',
            py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_data__pb2.Chunk.SerializeToString,
            py__video__gunner_dot_grpc__stream_dot_grpc__video_dot_response__pb2.UploadStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
